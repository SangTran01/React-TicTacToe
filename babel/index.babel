class App extends React.Component {
  constructor(props) {
    super(props);

    //TODO change showModal true and turn to null
    this.state = {
      showModal: true,
      gameBoard: ["", "", "", "", "", "", "", "", ""],
      winner: null,
      selected: null,
      maxPlayer: "x",
      minPlayer: "o"
    };

    this.handleCloseModal = this.handleCloseModal.bind(this);
  }

  resetBoard() {
    this.setState({ showModal: true });
    this.setState({
      gameBoard: ["", "", "", "", "", "", "", "", ""],
      winner: null,
      selected: null,
      maxPlayer: "x",
      minPlayer: "o"
    });
  }

  handleCloseModal() {
    this.setState({ showModal: false });
  }

  chooseX() {
    this.setState({ selected: "x" });
    this.setState({ showModal: false });
  }
  chooseO() {
    this.setState({ selected: "o" });
    this.setState({ showModal: false });
  }

  tie(board) {
    var moves = board.join("").replace(/ /g, "");
    if (moves.length === 9) {
      return true;
    }
    return false;
  }

  winner(board, player) {
    if (
      (board[0] === player && board[1] === player && board[2] === player) ||
      (board[3] === player && board[4] === player && board[5] === player) ||
      (board[6] === player && board[7] === player && board[8] === player) ||
      (board[0] === player && board[3] === player && board[6] === player) ||
      (board[1] === player && board[4] === player && board[7] === player) ||
      (board[2] === player && board[5] === player && board[8] === player) ||
      (board[0] === player && board[4] === player && board[8] === player) ||
      (board[2] === player && board[4] === player && board[6] === player)
    ) {
      return true;
    } else {
      return false;
    }
  }

  copyBoard(board) {
    return board.slice(0);
  }

  //steps
  //1. copy board
  //2. have player move first
  //3. check if won
  //4. have a.i. move
  //5. check if won
  //6. update gameboard with copy using setState

  validMove(move, player, board) {
    var newBoard = this.copyBoard(board);
    if (newBoard[move] === "") {
      newBoard[move] = player;
      return newBoard;
    } else return null;
  }

  //this assumes a.i is 'o' change it
  //going down from 100 if 'o'
  findAiMoveO(board) {
    let move = null;
    var bestMoveScore = 100;
    //Test Every Possible Move if the game is not already over.
    if (this.winner(board, "x") || this.winner(board, "o" || this.tie(board))) {
      return null;
    }
    for (var i = 0; i < board.length; i++) {
      let newBoard = this.validMove(i, this.state.minPlayer, board);
      //If validMove returned a valid game board
      if (newBoard) {
        var moveScore = this.maxScore(newBoard);
        if (moveScore < bestMoveScore) {
          bestMoveScore = moveScore;
          move = i;
        }
      }
    }
    return move;
  }
  
  findAiMoveX(board) {
    let move = null;
    var bestMoveScore = -100;
    //Test Every Possible Move if the game is not already over.
    if (this.winner(board, "x") || this.winner(board, "o" || this.tie(board))) {
      return null;
    }
    for (var i = 0; i < board.length; i++) {
      let newBoard = this.validMove(i, this.state.maxPlayer, board);
      //If validMove returned a valid game board
      if (newBoard) {
        var moveScore = this.minScore(newBoard);
        if (moveScore > bestMoveScore) {
          bestMoveScore = moveScore;
          move = i;
        }
      }
    }
    return move;
  }

  //for minPlayer
  minScore(board) {
    if (this.winner(board, "x")) {
      return 10;
    } else if (this.winner(board, "o")) {
      return -10;
    } else if (this.tie(board)) {
      return 0;
    } else {
      var bestMoveValue = 100;
      let move = 0;
      for (var i = 0; i < board.length; i++) {
        var newBoard = this.validMove(i, this.state.minPlayer, board);
        if (newBoard) {
          var predictedMoveValue = this.maxScore(newBoard);
          if (predictedMoveValue < bestMoveValue) {
            bestMoveValue = predictedMoveValue;
            move = i;
          }
        }
      }
      return bestMoveValue;
    }
  }

  //for maxPlayer
  maxScore(board) {
    if (this.winner(board, "x")) {
      return 10;
    } else if (this.winner(board, "o")) {
      return -10;
    } else if (this.tie(board)) {
      return 0;
    } else {
      var bestMoveValue = -100;
      let move = 0;
      for (var i = 0; i < board.length; i++) {
        var newBoard = this.validMove(i, this.state.maxPlayer, board);
        if (newBoard) {
          var predictedMoveValue = this.minScore(newBoard);
          if (predictedMoveValue > bestMoveValue) {
            bestMoveValue = predictedMoveValue;
            move = i;
          }
        }
      }
      return bestMoveValue;
    }
  }

  gameLoop(playerMove, currentPlayer) {
    //initally check tile if x,o,  or someone won before adding symbol to tile
    if (
      this.state.gameBoard[playerMove] === "x" ||
      this.state.gameBoard[playerMove] === "o" ||
      this.state.winner
    ) {
      //return if tile already clicked
      return;
    }
    let player = currentPlayer;
    let currentGameBoard = this.validMove(
      playerMove,
      player,
      this.state.gameBoard
    );
    if (this.winner(currentGameBoard, player)) {
      this.setState({
        gameBoard: currentGameBoard,
        winner: player
      });
      return;
    }
    if (this.tie(currentGameBoard)) {
      this.setState({
        gameBoard: currentGameBoard,
        winner: "d"
      });
      return;
    }
    //a.i player
    //player = this.state.minPlayer;
    if (currentPlayer === "o") {
      player = "x";
      currentGameBoard = this.validMove(
        this.findAiMoveX(currentGameBoard),
        player,
        currentGameBoard
      );
      if (this.winner(currentGameBoard, player)) {
        this.setState({
          gameBoard: currentGameBoard,
          winner: player
        });
        return;
      }
      if (this.tie(currentGameBoard)) {
        this.setState({
          gameBoard: currentGameBoard,
          winner: "d"
        });
        return;
      }
    } else {
      player = "o";
      currentGameBoard = this.validMove(
        this.findAiMoveO(currentGameBoard),
        player,
        currentGameBoard
      );
      if (this.winner(currentGameBoard, player)) {
        this.setState({
          gameBoard: currentGameBoard,
          winner: player
        });
        return;
      }
      if (this.tie(currentGameBoard)) {
        this.setState({
          gameBoard: currentGameBoard,
          winner: "d"
        });
        return;
      }
    }

    this.setState({ gameBoard: currentGameBoard });
  }
  
  render() {
    return (
      <div>
        <div className="menu">
          <ReactModal
            isOpen={this.state.showModal}
            contentLabel="chooseSymbol"
            className="Modal"
            overlayClassName="Overlay"
          >
            <h2>X or O?</h2>

            <button onClick={this.chooseX.bind(this)}>X</button>
            <button onClick={this.chooseO.bind(this)}>O</button>
          </ReactModal>
          <h1>Tic Tac Toe</h1>
          <Announcement winner={this.state.winner} />
          <ResetButton reset={this.resetBoard.bind(this)} />
        </div>
        {this.state.gameBoard.map((value, i) => {
          return (
            <Tile
              key={i}
              loc={i}
              value={value}
              gameLoop={this.gameLoop.bind(this)}
              player={
                this.state.selected === "x"
                  ? this.state.maxPlayer
                  : this.state.minPlayer
              }
            />
          );
        })}
      </div>
    );
  }
} //end of class App

class Announcement extends React.Component {
  render() {
    return (
      <div className={this.props.winner ? "visible" : "hidden"}>
        <h2>Game Over</h2>
        <h2>{this.props.winner} wins</h2>
      </div>
    );
  }
}

class Tile extends React.Component {
  tileClick(props) {
    console.log(props);
    props.gameLoop(props.loc, props.player);
  }
  render() {
    return (
      <div
        className={"tile " + this.props.loc}
        onClick={() => {
          this.tileClick(this.props);
        }}
      >
        <p>{this.props.value}</p>
      </div>
    );
  }
}

class ResetButton extends React.Component {
  render() {
    return <button onClick={this.props.reset}>Reset</button>;
  }
}

ReactDOM.render(<App />, document.querySelector(".container"));
